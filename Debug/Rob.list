
Rob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004fa4  08004fa4  00005fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd4  08004fd4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00005fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004fdc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  08004fe8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004fe8  000061e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001133c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f1  00000000  00000000  00017378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00019670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d07  00000000  00000000  0001a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d27  00000000  00000000  0001b3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148bb  00000000  00000000  0003e0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc549  00000000  00000000  000529b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ef02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  0012ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004f8c 	.word	0x08004f8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004f8c 	.word	0x08004f8c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <PCA9685_SetBit.2>:
  MX_UART4_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */

  void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
  {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af04      	add	r7, sp, #16
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	460b      	mov	r3, r1
 8000500:	71bb      	strb	r3, [r7, #6]
 8000502:	4613      	mov	r3, r2
 8000504:	717b      	strb	r3, [r7, #5]
 8000506:	f8c7 c000 	str.w	ip, [r7]
    uint8_t readValue;
    // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
    HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	b29a      	uxth	r2, r3
 800050e:	230a      	movs	r3, #10
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	2301      	movs	r3, #1
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	f107 030f 	add.w	r3, r7, #15
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2301      	movs	r3, #1
 800051e:	2180      	movs	r1, #128	@ 0x80
 8000520:	4819      	ldr	r0, [pc, #100]	@ (8000588 <PCA9685_SetBit.2+0x94>)
 8000522:	f001 fdc9 	bl	80020b8 <HAL_I2C_Mem_Read>
    if (Value == 0) readValue &= ~(1 << Bit);
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10d      	bne.n	8000548 <PCA9685_SetBit.2+0x54>
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	2201      	movs	r2, #1
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	b25b      	sxtb	r3, r3
 8000536:	43db      	mvns	r3, r3
 8000538:	b25a      	sxtb	r2, r3
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	b25b      	sxtb	r3, r3
 800053e:	4013      	ands	r3, r2
 8000540:	b25b      	sxtb	r3, r3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	e00a      	b.n	800055e <PCA9685_SetBit.2+0x6a>
    else readValue |= (1 << Bit);
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2201      	movs	r2, #1
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	b25a      	sxtb	r2, r3
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	b25b      	sxtb	r3, r3
 8000556:	4313      	orrs	r3, r2
 8000558:	b25b      	sxtb	r3, r3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	b29a      	uxth	r2, r3
 8000562:	230a      	movs	r3, #10
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2301      	movs	r3, #1
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	f107 030f 	add.w	r3, r7, #15
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	4804      	ldr	r0, [pc, #16]	@ (8000588 <PCA9685_SetBit.2+0x94>)
 8000576:	f001 fca5 	bl	8001ec4 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f000 fd76 	bl	800106c <HAL_Delay>
  }
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000070 	.word	0x20000070

0800058c <main>:
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	@ 0x2c
 8000590:	af00      	add	r7, sp, #0
int main(void)
 8000592:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000596:	623b      	str	r3, [r7, #32]
  HAL_Init();
 8000598:	f000 fcf6 	bl	8000f88 <HAL_Init>
  SystemClock_Config();
 800059c:	f000 f896 	bl	80006cc <SystemClock_Config>
  MX_GPIO_Init();
 80005a0:	f000 fa4c 	bl	8000a3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 fa20 	bl	80009e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a8:	f000 f97e 	bl	80008a8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005ac:	f000 f8fc 	bl	80007a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005b0:	f000 f94c 	bl	800084c <MX_I2C1_Init>
  MX_UART4_Init();
 80005b4:	f000 f9c4 	bl	8000940 <MX_UART4_Init>
  MX_UART5_Init();
 80005b8:	f000 f9ec 	bl	8000994 <MX_UART5_Init>
	  PCA9685_SetServo(servos[3], speed_rgt, 0);
	  HAL_Delay(t_ms);
	  PCA9685_StopServos(servos);
  }

  PCA9685_Init(50);
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	469c      	mov	ip, r3
 80005c2:	2032      	movs	r0, #50	@ 0x32
 80005c4:	f000 f86a 	bl	800069c <PCA9685_Init.0>

  int servos[4] = {0,1,2,3};
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0x7c>)
 80005ca:	f107 0410 	add.w	r4, r7, #16
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t RXdata[10];
  uint8_t angleY = 80;
 80005d4:	2350      	movs	r3, #80	@ 0x50
 80005d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t angleZ = 80;
 80005da:	2350      	movs	r3, #80	@ 0x50
 80005dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  // speed entre -1500 et 1500
  while (1)
  {

	    HAL_UART_Receive(&huart4, RXdata, 4, 100);
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	2364      	movs	r3, #100	@ 0x64
 80005e4:	2204      	movs	r2, #4
 80005e6:	4809      	ldr	r0, [pc, #36]	@ (800060c <main+0x80>)
 80005e8:	f003 fce7 	bl	8003fba <HAL_UART_Receive>
		HAL_UART_Transmit(&huart4, RXdata, 4, 100);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	2364      	movs	r3, #100	@ 0x64
 80005f0:	2204      	movs	r2, #4
 80005f2:	4806      	ldr	r0, [pc, #24]	@ (800060c <main+0x80>)
 80005f4:	f003 fc56 	bl	8003ea4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, RXdata, 4, 100);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	2364      	movs	r3, #100	@ 0x64
 80005fc:	2204      	movs	r2, #4
 80005fe:	4804      	ldr	r0, [pc, #16]	@ (8000610 <main+0x84>)
 8000600:	f003 fc50 	bl	8003ea4 <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart4, RXdata, 4, 100);
 8000604:	bf00      	nop
 8000606:	e7eb      	b.n	80005e0 <main+0x54>
 8000608:	08004fa4 	.word	0x08004fa4
 800060c:	2000010c 	.word	0x2000010c
 8000610:	20000154 	.word	0x20000154

08000614 <PCA9685_SetPWMFrequency.1>:
  {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b089      	sub	sp, #36	@ 0x24
 8000618:	af04      	add	r7, sp, #16
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4664      	mov	r4, ip
 8000620:	f8c7 c000 	str.w	ip, [r7]
    if(frequency >= 1526) prescale = 0x03;
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 800062a:	4293      	cmp	r3, r2
 800062c:	d902      	bls.n	8000634 <PCA9685_SetPWMFrequency.1+0x20>
 800062e:	2303      	movs	r3, #3
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e00c      	b.n	800064e <PCA9685_SetPWMFrequency.1+0x3a>
    else if(frequency <= 24) prescale = 0xFF;
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	2b18      	cmp	r3, #24
 8000638:	d802      	bhi.n	8000640 <PCA9685_SetPWMFrequency.1+0x2c>
 800063a:	23ff      	movs	r3, #255	@ 0xff
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e006      	b.n	800064e <PCA9685_SetPWMFrequency.1+0x3a>
    else prescale = 25000000 / (4096 * frequency);
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	031b      	lsls	r3, r3, #12
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <PCA9685_SetPWMFrequency.1+0x80>)
 8000646:	fb92 f3f3 	sdiv	r3, r2, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 800064e:	46a4      	mov	ip, r4
 8000650:	2201      	movs	r2, #1
 8000652:	2104      	movs	r1, #4
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ff4d 	bl	80004f4 <PCA9685_SetBit.2>
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 800065a:	230a      	movs	r3, #10
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	f107 030f 	add.w	r3, r7, #15
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	22fe      	movs	r2, #254	@ 0xfe
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	480a      	ldr	r0, [pc, #40]	@ (8000698 <PCA9685_SetPWMFrequency.1+0x84>)
 8000670:	f001 fc28 	bl	8001ec4 <HAL_I2C_Mem_Write>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000674:	46a4      	mov	ip, r4
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff3a 	bl	80004f4 <PCA9685_SetBit.2>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000680:	46a4      	mov	ip, r4
 8000682:	2201      	movs	r2, #1
 8000684:	2107      	movs	r1, #7
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ff34 	bl	80004f4 <PCA9685_SetBit.2>
  }
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	017d7840 	.word	0x017d7840
 8000698:	20000070 	.word	0x20000070

0800069c <PCA9685_Init.0>:
  {
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4664      	mov	r4, ip
 80006a8:	f8c7 c000 	str.w	ip, [r7]
    PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	46a4      	mov	ip, r4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffaf 	bl	8000614 <PCA9685_SetPWMFrequency.1>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 80006b6:	46a4      	mov	ip, r4
 80006b8:	2201      	movs	r2, #1
 80006ba:	2105      	movs	r1, #5
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff19 	bl	80004f4 <PCA9685_SetBit.2>
  }
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
	...

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	@ 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fc2a 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a29      	ldr	r2, [pc, #164]	@ (80007a0 <SystemClock_Config+0xd4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <SystemClock_Config+0xd4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemClock_Config+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <SystemClock_Config+0xd8>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemClock_Config+0xd8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000744:	2350      	movs	r3, #80	@ 0x50
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f002 fddd 	bl	8003318 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000764:	f000 f9e6 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fa7c 	bl	8002c84 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000792:	f000 f9cf 	bl	8000b34 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	@ 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <MX_ADC1_Init+0x9c>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007e8:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_ADC1_Init+0xa0>)
 80007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_ADC1_Init+0x98>)
 8000802:	2201      	movs	r2, #1
 8000804:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <MX_ADC1_Init+0x98>)
 8000808:	f000 fc54 	bl	80010b4 <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f98f 	bl	8000b34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000816:	2307      	movs	r3, #7
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <MX_ADC1_Init+0x98>)
 8000828:	f000 fc88 	bl	800113c <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000832:	f000 f97f 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000028 	.word	0x20000028
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 f9d7 	bl	8001c3c <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f94e 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000070 	.word	0x20000070
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <MX_TIM2_Init+0x94>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_TIM2_Init+0x94>)
 80008ce:	224f      	movs	r2, #79	@ 0x4f
 80008d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_TIM2_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_TIM2_Init+0x94>)
 80008da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_TIM2_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <MX_TIM2_Init+0x94>)
 80008ee:	f002 ffb1 	bl	8003854 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f8:	f000 f91c 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_TIM2_Init+0x94>)
 800090a:	f002 fff2 	bl	80038f2 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 f90e 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_TIM2_Init+0x94>)
 8000926:	f003 f9f1 	bl	8003d0c <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f900 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000c4 	.word	0x200000c4

08000940 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_UART4_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <MX_UART4_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_UART4_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_UART4_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_UART4_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_UART4_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_UART4_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_UART4_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_UART4_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_UART4_Init+0x4c>)
 8000978:	f003 fa44 	bl	8003e04 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f8d7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000010c 	.word	0x2000010c
 8000990:	40004c00 	.word	0x40004c00

08000994 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_UART5_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <MX_UART5_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_UART5_Init+0x4c>)
 80009cc:	f003 fa1a 	bl	8003e04 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f8ad 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000154 	.word	0x20000154
 80009e4:	40005000 	.word	0x40005000

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f003 f9f0 	bl	8003e04 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f883 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000019c 	.word	0x2000019c
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a33      	ldr	r2, [pc, #204]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a2c      	ldr	r2, [pc, #176]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <MX_GPIO_Init+0xf0>)
 8000ae4:	f001 f890 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <MX_GPIO_Init+0xf4>)
 8000b00:	f000 feee 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b04:	2320      	movs	r3, #32
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_GPIO_Init+0xf0>)
 8000b1c:	f000 fee0 	bl	80018e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020800 	.word	0x40020800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 fdda 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <HAL_ADC_MspInit+0x7c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d127      	bne.n	8000c02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_ADC_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_ADC_MspInit+0x84>)
 8000bfe:	f000 fe6f 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012000 	.word	0x40012000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <HAL_I2C_MspInit+0x8c>)
 8000c74:	f000 fe34 	bl	80018e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb8:	d10d      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	@ 0x38
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a5e      	ldr	r2, [pc, #376]	@ (8000e80 <HAL_UART_MspInit+0x198>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	4a5c      	ldr	r2, [pc, #368]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	4b56      	ldr	r3, [pc, #344]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a55      	ldr	r2, [pc, #340]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b53      	ldr	r3, [pc, #332]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d42:	2303      	movs	r3, #3
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d52:	2308      	movs	r3, #8
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	484a      	ldr	r0, [pc, #296]	@ (8000e88 <HAL_UART_MspInit+0x1a0>)
 8000d5e:	f000 fdbf 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d62:	e089      	b.n	8000e78 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==UART5)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a48      	ldr	r2, [pc, #288]	@ (8000e8c <HAL_UART_MspInit+0x1a4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d14b      	bne.n	8000e06 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b44      	ldr	r3, [pc, #272]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a43      	ldr	r2, [pc, #268]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b41      	ldr	r3, [pc, #260]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a3c      	ldr	r2, [pc, #240]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a35      	ldr	r2, [pc, #212]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b33      	ldr	r3, [pc, #204]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	482c      	ldr	r0, [pc, #176]	@ (8000e90 <HAL_UART_MspInit+0x1a8>)
 8000de0:	f000 fd7e 	bl	80018e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de4:	2304      	movs	r3, #4
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000df4:	2308      	movs	r3, #8
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4825      	ldr	r0, [pc, #148]	@ (8000e94 <HAL_UART_MspInit+0x1ac>)
 8000e00:	f000 fd6e 	bl	80018e0 <HAL_GPIO_Init>
}
 8000e04:	e038      	b.n	8000e78 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <HAL_UART_MspInit+0x1b0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d133      	bne.n	8000e78 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a13      	ldr	r2, [pc, #76]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_UART_MspInit+0x19c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <HAL_UART_MspInit+0x1a0>)
 8000e64:	f000 fd3c 	bl	80018e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2026      	movs	r0, #38	@ 0x26
 8000e6e:	f000 fc6e 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e72:	2026      	movs	r0, #38	@ 0x26
 8000e74:	f000 fc87 	bl	8001786 <HAL_NVIC_EnableIRQ>
}
 8000e78:	bf00      	nop
 8000e7a:	3738      	adds	r7, #56	@ 0x38
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004c00 	.word	0x40004c00
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40005000 	.word	0x40005000
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40004400 	.word	0x40004400

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f89b 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <USART2_IRQHandler+0x10>)
 8000f02:	f003 f8f1 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000019c 	.word	0x2000019c

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f003 ffef 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fb11 	bl	800058c <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f78:	08004fdc 	.word	0x08004fdc
  ldr r2, =_sbss
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f80:	200001e8 	.word	0x200001e8

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fbc1 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fdc0 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fbd9 	bl	80017a2 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 fba1 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	200001e4 	.word	0x200001e4

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200001e4 	.word	0x200001e4

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e033      	b.n	8001132 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fd5c 	bl	8000b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d118      	bne.n	8001124 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010fa:	f023 0302 	bic.w	r3, r3, #2
 80010fe:	f043 0202 	orr.w	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f94a 	bl	80013a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f023 0303 	bic.w	r3, r3, #3
 800111a:	f043 0201 	orr.w	r2, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40
 8001122:	e001      	b.n	8001128 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1c>
 8001154:	2302      	movs	r3, #2
 8001156:	e113      	b.n	8001380 <HAL_ADC_ConfigChannel+0x244>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b09      	cmp	r3, #9
 8001166:	d925      	bls.n	80011b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68d9      	ldr	r1, [r3, #12]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	3b1e      	subs	r3, #30
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68d9      	ldr	r1, [r3, #12]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	4603      	mov	r3, r0
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4403      	add	r3, r0
 80011a6:	3b1e      	subs	r3, #30
 80011a8:	409a      	lsls	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	e022      	b.n	80011fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6919      	ldr	r1, [r3, #16]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	2207      	movs	r2, #7
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	400a      	ands	r2, r1
 80011d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4403      	add	r3, r0
 80011f0:	409a      	lsls	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d824      	bhi.n	800124c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	3b05      	subs	r3, #5
 8001214:	221f      	movs	r2, #31
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	400a      	ands	r2, r1
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3b05      	subs	r3, #5
 800123e:	fa00 f203 	lsl.w	r2, r0, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
 800124a:	e04c      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d824      	bhi.n	800129e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	3b23      	subs	r3, #35	@ 0x23
 8001266:	221f      	movs	r2, #31
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43da      	mvns	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	400a      	ands	r2, r1
 8001274:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b23      	subs	r3, #35	@ 0x23
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	631a      	str	r2, [r3, #48]	@ 0x30
 800129c:	e023      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	3b41      	subs	r3, #65	@ 0x41
 80012b0:	221f      	movs	r2, #31
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	400a      	ands	r2, r1
 80012be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	3b41      	subs	r3, #65	@ 0x41
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e6:	4b29      	ldr	r3, [pc, #164]	@ (800138c <HAL_ADC_ConfigChannel+0x250>)
 80012e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a28      	ldr	r2, [pc, #160]	@ (8001390 <HAL_ADC_ConfigChannel+0x254>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10f      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d8>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b12      	cmp	r3, #18
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <HAL_ADC_ConfigChannel+0x254>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x23a>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <HAL_ADC_ConfigChannel+0x258>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d003      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x1f4>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b11      	cmp	r3, #17
 800132e:	d122      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <HAL_ADC_ConfigChannel+0x258>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d111      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_ADC_ConfigChannel+0x25c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a11      	ldr	r2, [pc, #68]	@ (800139c <HAL_ADC_ConfigChannel+0x260>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0c9a      	lsrs	r2, r3, #18
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001368:	e002      	b.n	8001370 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3b01      	subs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40012300 	.word	0x40012300
 8001390:	40012000 	.word	0x40012000
 8001394:	10000012 	.word	0x10000012
 8001398:	20000000 	.word	0x20000000
 800139c:	431bde83 	.word	0x431bde83

080013a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a8:	4b79      	ldr	r3, [pc, #484]	@ (8001590 <ADC_Init+0x1f0>)
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	021a      	lsls	r2, r3, #8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800141a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6899      	ldr	r1, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	4a58      	ldr	r2, [pc, #352]	@ (8001594 <ADC_Init+0x1f4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d022      	beq.n	800147e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6899      	ldr	r1, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e00f      	b.n	800149e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800148c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800149c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0202 	bic.w	r2, r2, #2
 80014ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6899      	ldr	r1, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	005a      	lsls	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6859      	ldr	r1, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	035a      	lsls	r2, r3, #13
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e007      	b.n	8001514 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001512:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	3b01      	subs	r3, #1
 8001530:	051a      	lsls	r2, r3, #20
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6899      	ldr	r1, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001556:	025a      	lsls	r2, r3, #9
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	029a      	lsls	r2, r3, #10
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40012300 	.word	0x40012300
 8001594:	0f000001 	.word	0x0f000001

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4907      	ldr	r1, [pc, #28]	@ (8001634 <__NVIC_EnableIRQ+0x38>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	@ (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	@ (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	@ 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff29 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff3e 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff8e 	bl	800168c <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5d 	bl	8001638 <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff31 	bl	80015fc <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fc44 	bl	8001054 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d008      	beq.n	80017ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e052      	b.n	8001892 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0216 	bic.w	r2, r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800180a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <HAL_DMA_Abort+0x62>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0208 	bic.w	r2, r2, #8
 800182a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183c:	e013      	b.n	8001866 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183e:	f7ff fc09 	bl	8001054 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b05      	cmp	r3, #5
 800184a:	d90c      	bls.n	8001866 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2220      	movs	r2, #32
 8001850:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e015      	b.n	8001892 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e4      	bne.n	800183e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001878:	223f      	movs	r2, #63	@ 0x3f
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00c      	b.n	80018d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2205      	movs	r2, #5
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e165      	b.n	8001bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8154 	bne.w	8001bc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d005      	beq.n	8001932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	2b02      	cmp	r3, #2
 8001930:	d130      	bne.n	8001994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d017      	beq.n	80019d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ae 	beq.w	8001bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001be0 <HAL_GPIO_Init+0x300>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001be0 <HAL_GPIO_Init+0x300>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <HAL_GPIO_Init+0x300>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a82:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8001be8 <HAL_GPIO_Init+0x308>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d025      	beq.n	8001afa <HAL_GPIO_Init+0x21a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8001bec <HAL_GPIO_Init+0x30c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01f      	beq.n	8001af6 <HAL_GPIO_Init+0x216>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_GPIO_Init+0x310>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0x212>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_GPIO_Init+0x314>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0x20e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8001bf8 <HAL_GPIO_Init+0x318>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00d      	beq.n	8001aea <HAL_GPIO_Init+0x20a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bfc <HAL_GPIO_Init+0x31c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a49      	ldr	r2, [pc, #292]	@ (8001c00 <HAL_GPIO_Init+0x320>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_GPIO_Init+0x202>
 8001ade:	2306      	movs	r3, #6
 8001ae0:	e00c      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e00a      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	e008      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001aea:	2304      	movs	r3, #4
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e004      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x21c>
 8001afa:	2300      	movs	r3, #0
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	f002 0203 	and.w	r2, r2, #3
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	4093      	lsls	r3, r2
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b0c:	4935      	ldr	r1, [pc, #212]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3e:	4a31      	ldr	r2, [pc, #196]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b68:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b6e:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b92:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bbc:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <HAL_GPIO_Init+0x324>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b0f      	cmp	r3, #15
 8001bcc:	f67f ae96 	bls.w	80018fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3724      	adds	r7, #36	@ 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40021400 	.word	0x40021400
 8001c00:	40021800 	.word	0x40021800
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e12b      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe ffd8 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	@ 0x24
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca0:	f001 f8e2 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4a81      	ldr	r2, [pc, #516]	@ (8001eb0 <HAL_I2C_Init+0x274>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d807      	bhi.n	8001cc0 <HAL_I2C_Init+0x84>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a80      	ldr	r2, [pc, #512]	@ (8001eb4 <HAL_I2C_Init+0x278>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e006      	b.n	8001cce <HAL_I2C_Init+0x92>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8001eb8 <HAL_I2C_Init+0x27c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0e7      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a78      	ldr	r2, [pc, #480]	@ (8001ebc <HAL_I2C_Init+0x280>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb0 <HAL_I2C_Init+0x274>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d802      	bhi.n	8001d10 <HAL_I2C_Init+0xd4>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	e009      	b.n	8001d24 <HAL_I2C_Init+0xe8>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a69      	ldr	r2, [pc, #420]	@ (8001ec0 <HAL_I2C_Init+0x284>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	3301      	adds	r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	495c      	ldr	r1, [pc, #368]	@ (8001eb0 <HAL_I2C_Init+0x274>)
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d819      	bhi.n	8001d78 <HAL_I2C_Init+0x13c>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e59      	subs	r1, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d58:	400b      	ands	r3, r1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_I2C_Init+0x138>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e59      	subs	r1, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	e051      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e04f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_I2C_Init+0x168>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e012      	b.n	8001dca <HAL_I2C_Init+0x18e>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x196>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e022      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10e      	bne.n	8001df8 <HAL_I2C_Init+0x1bc>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e58      	subs	r0, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	0099      	lsls	r1, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6809      	ldr	r1, [r1, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6911      	ldr	r1, [r2, #16]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	000186a0 	.word	0x000186a0
 8001eb4:	001e847f 	.word	0x001e847f
 8001eb8:	003d08ff 	.word	0x003d08ff
 8001ebc:	431bde83 	.word	0x431bde83
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ede:	f7ff f8b9 	bl	8001054 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80d9 	bne.w	80020a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2319      	movs	r3, #25
 8001ef8:	2201      	movs	r2, #1
 8001efa:	496d      	ldr	r1, [pc, #436]	@ (80020b0 <HAL_I2C_Mem_Write+0x1ec>)
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fc8b 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e0cc      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Mem_Write+0x56>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0c5      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d007      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2221      	movs	r2, #33	@ 0x21
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2240      	movs	r2, #64	@ 0x40
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001f80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f82:	88f8      	ldrh	r0, [r7, #6]
 8001f84:	893a      	ldrh	r2, [r7, #8]
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fac2 	bl	800251c <I2C_RequestMemoryWrite>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d052      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e081      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fd50 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d107      	bne.n	8001fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06b      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d11b      	bne.n	8002044 <HAL_I2C_Mem_Write+0x180>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1aa      	bne.n	8001fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fd43 	bl	8002adc <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d107      	bne.n	8002074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e016      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	00100002 	.word	0x00100002
 80020b4:	ffff0000 	.word	0xffff0000

080020b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	@ 0x30
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d2:	f7fe ffbf 	bl	8001054 <HAL_GetTick>
 80020d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	f040 8214 	bne.w	800250e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2319      	movs	r3, #25
 80020ec:	2201      	movs	r2, #1
 80020ee:	497b      	ldr	r1, [pc, #492]	@ (80022dc <HAL_I2C_Mem_Read+0x224>)
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fb91 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	e207      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2C_Mem_Read+0x56>
 800210a:	2302      	movs	r3, #2
 800210c:	e200      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d007      	beq.n	8002134 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2222      	movs	r2, #34	@ 0x22
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002164:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a5b      	ldr	r2, [pc, #364]	@ (80022e0 <HAL_I2C_Mem_Read+0x228>)
 8002174:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002176:	88f8      	ldrh	r0, [r7, #6]
 8002178:	893a      	ldrh	r2, [r7, #8]
 800217a:	8979      	ldrh	r1, [r7, #10]
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4603      	mov	r3, r0
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa5e 	bl	8002648 <I2C_RequestMemoryRead>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1bc      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e190      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d11b      	bne.n	8002206 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e170      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220a:	2b02      	cmp	r3, #2
 800220c:	d11b      	bne.n	8002246 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800221c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800222c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	e150      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800225c:	e144      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002262:	2b03      	cmp	r3, #3
 8002264:	f200 80f1 	bhi.w	800244a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226c:	2b01      	cmp	r3, #1
 800226e:	d123      	bne.n	80022b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002272:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fc79 	bl	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e145      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022b6:	e117      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d14e      	bne.n	800235e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c6:	2200      	movs	r2, #0
 80022c8:	4906      	ldr	r1, [pc, #24]	@ (80022e4 <HAL_I2C_Mem_Read+0x22c>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 faa4 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e11a      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000
 80022e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800235c:	e0c4      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002364:	2200      	movs	r2, #0
 8002366:	496c      	ldr	r1, [pc, #432]	@ (8002518 <HAL_I2C_Mem_Read+0x460>)
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fa55 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cb      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c0:	2200      	movs	r2, #0
 80023c2:	4955      	ldr	r1, [pc, #340]	@ (8002518 <HAL_I2C_Mem_Read+0x460>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fa27 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e09d      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002448:	e04e      	b.n	80024e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb8c 	bl	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e058      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d124      	bne.n	80024e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d107      	bne.n	80024b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f aeb6 	bne.w	800225e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3728      	adds	r7, #40	@ 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	00010004 	.word	0x00010004

0800251c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	2200      	movs	r2, #0
 800254e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f960 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256c:	d103      	bne.n	8002576 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002574:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e05f      	b.n	800263a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	492d      	ldr	r1, [pc, #180]	@ (8002644 <I2C_RequestMemoryWrite+0x128>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f9bb 	bl	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e04c      	b.n	800263a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b8:	6a39      	ldr	r1, [r7, #32]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fa46 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d107      	bne.n	80025de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e02b      	b.n	800263a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025e8:	893b      	ldrh	r3, [r7, #8]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	e021      	b.n	8002638 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa20 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b04      	cmp	r3, #4
 8002618:	d107      	bne.n	800262a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e005      	b.n	800263a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	00010002 	.word	0x00010002

08002648 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002670:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002680:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	2200      	movs	r2, #0
 800268a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8c2 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026a8:	d103      	bne.n	80026b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0aa      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	4952      	ldr	r1, [pc, #328]	@ (8002814 <I2C_RequestMemoryRead+0x1cc>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f91d 	bl	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e097      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f9a8 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002718:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e076      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	e021      	b.n	8002774 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002730:	893b      	ldrh	r3, [r7, #8]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b29b      	uxth	r3, r3
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f982 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	2b04      	cmp	r3, #4
 8002754:	d107      	bne.n	8002766 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002764:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e050      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800276a:	893b      	ldrh	r3, [r7, #8]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002776:	6a39      	ldr	r1, [r7, #32]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f967 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e035      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f82b 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d6:	d103      	bne.n	80027e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e013      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027e4:	897b      	ldrh	r3, [r7, #10]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	6a3a      	ldr	r2, [r7, #32]
 80027f8:	4906      	ldr	r1, [pc, #24]	@ (8002814 <I2C_RequestMemoryRead+0x1cc>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f886 	bl	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00010002 	.word	0x00010002

08002818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002828:	e048      	b.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d044      	beq.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002832:	f7fe fc0f 	bl	8001054 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d302      	bcc.n	8002848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d139      	bne.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10d      	bne.n	800286e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	e00c      	b.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x70>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	429a      	cmp	r2, r3
 800288c:	d116      	bne.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e023      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d10d      	bne.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	e00c      	b.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d093      	beq.n	800282a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800291a:	e071      	b.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292a:	d123      	bne.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002944:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0204 	orr.w	r2, r3, #4
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e067      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d041      	beq.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297c:	f7fe fb6a 	bl	8001054 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d136      	bne.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10c      	bne.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e00b      	b.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	43da      	mvns	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e021      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10c      	bne.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e00b      	b.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f af6d 	bne.w	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a58:	e034      	b.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f8e3 	bl	8002c26 <I2C_IsAcknowledgeFailed>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e034      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d028      	beq.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7fe faef 	bl	8001054 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11d      	bne.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d016      	beq.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e007      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b80      	cmp	r3, #128	@ 0x80
 8002ad0:	d1c3      	bne.n	8002a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae8:	e034      	b.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f89b 	bl	8002c26 <I2C_IsAcknowledgeFailed>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e034      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d028      	beq.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7fe faa7 	bl	8001054 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d11d      	bne.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d016      	beq.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e007      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d1c3      	bne.n	8002aea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b78:	e049      	b.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d119      	bne.n	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0210 	mvn.w	r2, #16
 8002b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e030      	b.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbc:	f7fe fa4a 	bl	8001054 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11d      	bne.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	2b40      	cmp	r3, #64	@ 0x40
 8002bde:	d016      	beq.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b40      	cmp	r3, #64	@ 0x40
 8002c1a:	d1ae      	bne.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3c:	d11b      	bne.n	8002c76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f043 0204 	orr.w	r2, r3, #4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0cc      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b68      	ldr	r3, [pc, #416]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d90c      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b3f      	ldr	r3, [pc, #252]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e067      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b37      	ldr	r3, [pc, #220]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4934      	ldr	r1, [pc, #208]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fe f96e 	bl	8001054 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe f96a 	bl	8001054 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d20c      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b22      	ldr	r3, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f855 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe f8ce 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08004fb4 	.word	0x08004fb4
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a9b      	lsrs	r3, r3, #10
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	@ (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08004fc4 	.word	0x08004fc4

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e94:	f7ff ffdc 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	@ (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08004fc4 	.word	0x08004fc4

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b0ae      	sub	sp, #184	@ 0xb8
 8002ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ede:	4bcb      	ldr	r3, [pc, #812]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	f200 8206 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x440>
 8002eec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f29 	.word	0x08002f29
 8002ef8:	080032f9 	.word	0x080032f9
 8002efc:	080032f9 	.word	0x080032f9
 8002f00:	080032f9 	.word	0x080032f9
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	080032f9 	.word	0x080032f9
 8002f0c:	080032f9 	.word	0x080032f9
 8002f10:	080032f9 	.word	0x080032f9
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	080032f9 	.word	0x080032f9
 8002f1c:	080032f9 	.word	0x080032f9
 8002f20:	080032f9 	.word	0x080032f9
 8002f24:	08003129 	.word	0x08003129
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4bb9      	ldr	r3, [pc, #740]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002f2e:	e1e7      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f30:	4bb8      	ldr	r3, [pc, #736]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f36:	e1e3      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4bb4      	ldr	r3, [pc, #720]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f44:	4bb1      	ldr	r3, [pc, #708]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d071      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4bae      	ldr	r3, [pc, #696]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4621      	mov	r1, r4
 8002f90:	1a51      	subs	r1, r2, r1
 8002f92:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f94:	4629      	mov	r1, r5
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002fa8:	4649      	mov	r1, r9
 8002faa:	018b      	lsls	r3, r1, #6
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	018a      	lsls	r2, r1, #6
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	1a51      	subs	r1, r2, r1
 8002fba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	00cb      	lsls	r3, r1, #3
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fda:	4641      	mov	r1, r8
 8002fdc:	00ca      	lsls	r2, r1, #3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fea:	462b      	mov	r3, r5
 8002fec:	460a      	mov	r2, r1
 8002fee:	eb42 0303 	adc.w	r3, r2, r3
 8002ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003000:	4629      	mov	r1, r5
 8003002:	024b      	lsls	r3, r1, #9
 8003004:	4621      	mov	r1, r4
 8003006:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800300a:	4621      	mov	r1, r4
 800300c:	024a      	lsls	r2, r1, #9
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800301c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003020:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003024:	f7fd f8ee 	bl	8000204 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003032:	e067      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4b75      	ldr	r3, [pc, #468]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003040:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800304e:	2300      	movs	r3, #0
 8003050:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003052:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	0159      	lsls	r1, r3, #5
 8003064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003068:	0150      	lsls	r0, r2, #5
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4621      	mov	r1, r4
 8003070:	1a51      	subs	r1, r2, r1
 8003072:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003074:	4629      	mov	r1, r5
 8003076:	eb63 0301 	sbc.w	r3, r3, r1
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003088:	4649      	mov	r1, r9
 800308a:	018b      	lsls	r3, r1, #6
 800308c:	4641      	mov	r1, r8
 800308e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003092:	4641      	mov	r1, r8
 8003094:	018a      	lsls	r2, r1, #6
 8003096:	4641      	mov	r1, r8
 8003098:	ebb2 0a01 	subs.w	sl, r2, r1
 800309c:	4649      	mov	r1, r9
 800309e:	eb63 0b01 	sbc.w	fp, r3, r1
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b6:	4692      	mov	sl, r2
 80030b8:	469b      	mov	fp, r3
 80030ba:	4623      	mov	r3, r4
 80030bc:	eb1a 0303 	adds.w	r3, sl, r3
 80030c0:	623b      	str	r3, [r7, #32]
 80030c2:	462b      	mov	r3, r5
 80030c4:	eb4b 0303 	adc.w	r3, fp, r3
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ec:	2200      	movs	r2, #0
 80030ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80030f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80030f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80030f6:	f7fd f885 	bl	8000204 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4613      	mov	r3, r2
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b41      	ldr	r3, [pc, #260]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800311a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003126:	e0eb      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b38      	ldr	r3, [pc, #224]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003130:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003134:	4b35      	ldr	r3, [pc, #212]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d06b      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003140:	4b32      	ldr	r3, [pc, #200]	@ (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	2200      	movs	r2, #0
 8003148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800314a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800314c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	663b      	str	r3, [r7, #96]	@ 0x60
 8003154:	2300      	movs	r3, #0
 8003156:	667b      	str	r3, [r7, #100]	@ 0x64
 8003158:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800315c:	4622      	mov	r2, r4
 800315e:	462b      	mov	r3, r5
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0159      	lsls	r1, r3, #5
 800316a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316e:	0150      	lsls	r0, r2, #5
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4621      	mov	r1, r4
 8003176:	1a51      	subs	r1, r2, r1
 8003178:	61b9      	str	r1, [r7, #24]
 800317a:	4629      	mov	r1, r5
 800317c:	eb63 0301 	sbc.w	r3, r3, r1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800318e:	4659      	mov	r1, fp
 8003190:	018b      	lsls	r3, r1, #6
 8003192:	4651      	mov	r1, sl
 8003194:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003198:	4651      	mov	r1, sl
 800319a:	018a      	lsls	r2, r1, #6
 800319c:	4651      	mov	r1, sl
 800319e:	ebb2 0801 	subs.w	r8, r2, r1
 80031a2:	4659      	mov	r1, fp
 80031a4:	eb63 0901 	sbc.w	r9, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031bc:	4690      	mov	r8, r2
 80031be:	4699      	mov	r9, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	eb18 0303 	adds.w	r3, r8, r3
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	462b      	mov	r3, r5
 80031ca:	eb49 0303 	adc.w	r3, r9, r3
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031dc:	4629      	mov	r1, r5
 80031de:	024b      	lsls	r3, r1, #9
 80031e0:	4621      	mov	r1, r4
 80031e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e6:	4621      	mov	r1, r4
 80031e8:	024a      	lsls	r2, r1, #9
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031f2:	2200      	movs	r2, #0
 80031f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031fc:	f7fd f802 	bl	8000204 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800320a:	e065      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x420>
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400
 8003214:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003218:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x458>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	2200      	movs	r2, #0
 8003220:	4618      	mov	r0, r3
 8003222:	4611      	mov	r1, r2
 8003224:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003228:	653b      	str	r3, [r7, #80]	@ 0x50
 800322a:	2300      	movs	r3, #0
 800322c:	657b      	str	r3, [r7, #84]	@ 0x54
 800322e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003232:	4642      	mov	r2, r8
 8003234:	464b      	mov	r3, r9
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	0159      	lsls	r1, r3, #5
 8003240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003244:	0150      	lsls	r0, r2, #5
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4641      	mov	r1, r8
 800324c:	1a51      	subs	r1, r2, r1
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4649      	mov	r1, r9
 8003252:	eb63 0301 	sbc.w	r3, r3, r1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003264:	4659      	mov	r1, fp
 8003266:	018b      	lsls	r3, r1, #6
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326e:	4651      	mov	r1, sl
 8003270:	018a      	lsls	r2, r1, #6
 8003272:	4651      	mov	r1, sl
 8003274:	1a54      	subs	r4, r2, r1
 8003276:	4659      	mov	r1, fp
 8003278:	eb63 0501 	sbc.w	r5, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	4643      	mov	r3, r8
 8003292:	18e3      	adds	r3, r4, r3
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	464b      	mov	r3, r9
 8003298:	eb45 0303 	adc.w	r3, r5, r3
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032aa:	4629      	mov	r1, r5
 80032ac:	028b      	lsls	r3, r1, #10
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b4:	4621      	mov	r1, r4
 80032b6:	028a      	lsls	r2, r1, #10
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032c0:	2200      	movs	r2, #0
 80032c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032ca:	f7fc ff9b 	bl	8000204 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4613      	mov	r3, r2
 80032d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x458>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0f1b      	lsrs	r3, r3, #28
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80032e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032f6:	e003      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003304:	4618      	mov	r0, r3
 8003306:	37b8      	adds	r7, #184	@ 0xb8
 8003308:	46bd      	mov	sp, r7
 800330a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	00f42400 	.word	0x00f42400

08003318 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e28d      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8083 	beq.w	800343e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003338:	4b94      	ldr	r3, [pc, #592]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d019      	beq.n	8003378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003344:	4b91      	ldr	r3, [pc, #580]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800334c:	2b08      	cmp	r3, #8
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003350:	4b8e      	ldr	r3, [pc, #568]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335c:	d00c      	beq.n	8003378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4b8b      	ldr	r3, [pc, #556]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d112      	bne.n	8003390 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b88      	ldr	r3, [pc, #544]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b84      	ldr	r3, [pc, #528]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05b      	beq.n	800343c <HAL_RCC_OscConfig+0x124>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d157      	bne.n	800343c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e25a      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x90>
 800339a:	4b7c      	ldr	r3, [pc, #496]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7b      	ldr	r2, [pc, #492]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xcc>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0xb4>
 80033b2:	4b76      	ldr	r3, [pc, #472]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b73      	ldr	r3, [pc, #460]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a72      	ldr	r2, [pc, #456]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xcc>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b6c      	ldr	r3, [pc, #432]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe32 	bl	8001054 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe2e 	bl	8001054 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	@ 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e21f      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b61      	ldr	r3, [pc, #388]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xdc>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fe1e 	bl	8001054 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fe1a 	bl	8001054 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	@ 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e20b      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b57      	ldr	r3, [pc, #348]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x104>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06f      	beq.n	800352a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800344a:	4b50      	ldr	r3, [pc, #320]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d017      	beq.n	8003486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003456:	4b4d      	ldr	r3, [pc, #308]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003462:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b44      	ldr	r3, [pc, #272]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b41      	ldr	r3, [pc, #260]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x186>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e1d3      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b3b      	ldr	r3, [pc, #236]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4937      	ldr	r1, [pc, #220]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <HAL_RCC_OscConfig+0x278>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fdc7 	bl	8001054 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd fdc3 	bl	8001054 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1b4      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b2b      	ldr	r3, [pc, #172]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b28      	ldr	r3, [pc, #160]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4925      	ldr	r1, [pc, #148]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x278>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fda6 	bl	8001054 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7fd fda2 	bl	8001054 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e193      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d036      	beq.n	80035a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <HAL_RCC_OscConfig+0x27c>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd fd86 	bl	8001054 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd fd82 	bl	8001054 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e173      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x234>
 800356a:	e01b      	b.n	80035a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_OscConfig+0x27c>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fd fd6f 	bl	8001054 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e00e      	b.n	8003598 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd fd6b 	bl	8001054 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d907      	bls.n	8003598 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e15c      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
 800358c:	40023800 	.word	0x40023800
 8003590:	42470000 	.word	0x42470000
 8003594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b8a      	ldr	r3, [pc, #552]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ea      	bne.n	800357a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8097 	beq.w	80036e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b83      	ldr	r3, [pc, #524]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	4b7f      	ldr	r3, [pc, #508]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	4a7e      	ldr	r2, [pc, #504]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d2:	4b7c      	ldr	r3, [pc, #496]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b79      	ldr	r3, [pc, #484]	@ (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ee:	4b76      	ldr	r3, [pc, #472]	@ (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	@ (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fa:	f7fd fd2b 	bl	8001054 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fd fd27 	bl	8001054 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e118      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b6c      	ldr	r3, [pc, #432]	@ (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x31e>
 8003628:	4b66      	ldr	r3, [pc, #408]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
 8003634:	e01c      	b.n	8003670 <HAL_RCC_OscConfig+0x358>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x340>
 800363e:	4b61      	ldr	r3, [pc, #388]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	4a60      	ldr	r2, [pc, #384]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	@ 0x70
 800364a:	4b5e      	ldr	r3, [pc, #376]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	4a5d      	ldr	r2, [pc, #372]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	@ 0x70
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0x358>
 8003658:	4b5a      	ldr	r3, [pc, #360]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	4a59      	ldr	r2, [pc, #356]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	@ 0x70
 8003664:	4b57      	ldr	r3, [pc, #348]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	4a56      	ldr	r2, [pc, #344]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd fcec 	bl	8001054 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fd fce8 	bl	8001054 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0d7      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ee      	beq.n	8003680 <HAL_RCC_OscConfig+0x368>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd fcd6 	bl	8001054 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fd fcd2 	bl	8001054 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0c1      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	4b40      	ldr	r3, [pc, #256]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ee      	bne.n	80036ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b3b      	ldr	r3, [pc, #236]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	4a3a      	ldr	r2, [pc, #232]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80ad 	beq.w	8003844 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ea:	4b36      	ldr	r3, [pc, #216]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d060      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d145      	bne.n	800378a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_RCC_OscConfig+0x4b4>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fca6 	bl	8001054 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fd fca2 	bl	8001054 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e093      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b29      	ldr	r3, [pc, #164]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	071b      	lsls	r3, r3, #28
 8003756:	491b      	ldr	r1, [pc, #108]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <HAL_RCC_OscConfig+0x4b4>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd fc77 	bl	8001054 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fd fc73 	bl	8001054 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e064      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x452>
 8003788:	e05c      	b.n	8003844 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_OscConfig+0x4b4>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fc60 	bl	8001054 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fc5c 	bl	8001054 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e04d      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x480>
 80037b6:	e045      	b.n	8003844 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e040      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000
 80037cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003850 <HAL_RCC_OscConfig+0x538>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d030      	beq.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d129      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d122      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	4293      	cmp	r3, r2
 800380a:	d119      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d10f      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fa14 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 f8f4 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_TIM_ConfigClockSource+0x1c>
 800390a:	2302      	movs	r3, #2
 800390c:	e0b4      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x186>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800392c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003934:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003946:	d03e      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0xd4>
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394c:	f200 8087 	bhi.w	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003954:	f000 8086 	beq.w	8003a64 <HAL_TIM_ConfigClockSource+0x172>
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395c:	d87f      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 800395e:	2b70      	cmp	r3, #112	@ 0x70
 8003960:	d01a      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0xa6>
 8003962:	2b70      	cmp	r3, #112	@ 0x70
 8003964:	d87b      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 8003966:	2b60      	cmp	r3, #96	@ 0x60
 8003968:	d050      	beq.n	8003a0c <HAL_TIM_ConfigClockSource+0x11a>
 800396a:	2b60      	cmp	r3, #96	@ 0x60
 800396c:	d877      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 800396e:	2b50      	cmp	r3, #80	@ 0x50
 8003970:	d03c      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0xfa>
 8003972:	2b50      	cmp	r3, #80	@ 0x50
 8003974:	d873      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 8003976:	2b40      	cmp	r3, #64	@ 0x40
 8003978:	d058      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0x13a>
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d86f      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 800397e:	2b30      	cmp	r3, #48	@ 0x30
 8003980:	d064      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0x15a>
 8003982:	2b30      	cmp	r3, #48	@ 0x30
 8003984:	d86b      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 8003986:	2b20      	cmp	r3, #32
 8003988:	d060      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0x15a>
 800398a:	2b20      	cmp	r3, #32
 800398c:	d867      	bhi.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d05c      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0x15a>
 8003992:	2b10      	cmp	r3, #16
 8003994:	d05a      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0x15a>
 8003996:	e062      	b.n	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	f000 f990 	bl	8003ccc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
      break;
 80039c4:	e04f      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	f000 f979 	bl	8003ccc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039e8:	609a      	str	r2, [r3, #8]
      break;
 80039ea:	e03c      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f8:	461a      	mov	r2, r3
 80039fa:	f000 f8ed 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2150      	movs	r1, #80	@ 0x50
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f946 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003a0a:	e02c      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f000 f90c 	bl	8003c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2160      	movs	r1, #96	@ 0x60
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f936 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003a2a:	e01c      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f000 f8cd 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2140      	movs	r1, #64	@ 0x40
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f926 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e00c      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 f91d 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e003      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      break;
 8003a62:	e000      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a46      	ldr	r2, [pc, #280]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a43      	ldr	r2, [pc, #268]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a42      	ldr	r2, [pc, #264]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	@ (8003bb8 <TIM_Base_SetConfig+0x138>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a40      	ldr	r2, [pc, #256]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d02b      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae0:	d027      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d023      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a31      	ldr	r2, [pc, #196]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01f      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a30      	ldr	r2, [pc, #192]	@ (8003bb8 <TIM_Base_SetConfig+0x138>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01b      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d017      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <TIM_Base_SetConfig+0x140>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <TIM_Base_SetConfig+0x144>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <TIM_Base_SetConfig+0x148>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <TIM_Base_SetConfig+0x14c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd0 <TIM_Base_SetConfig+0x150>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <TIM_Base_SetConfig+0x154>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a10      	ldr	r2, [pc, #64]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0xf8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a12      	ldr	r2, [pc, #72]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	611a      	str	r2, [r3, #16]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800
 8003bcc:	40001800 	.word	0x40001800
 8003bd0:	40001c00 	.word	0x40001c00
 8003bd4:	40002000 	.word	0x40002000

08003bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0201 	bic.w	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 030a 	bic.w	r3, r3, #10
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f023 0210 	bic.w	r2, r3, #16
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	031b      	lsls	r3, r3, #12
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f043 0307 	orr.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e05a      	b.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a21      	ldr	r2, [pc, #132]	@ (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d70:	d01d      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10c      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40000c00 	.word	0x40000c00
 8003df8:	40010400 	.word	0x40010400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40001800 	.word	0x40001800

08003e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e042      	b.n	8003e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc ff5c 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fdff 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d175      	bne.n	8003fb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Transmit+0x2c>
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e06e      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2221      	movs	r2, #33	@ 0x21
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd f8b7 	bl	8001054 <HAL_GetTick>
 8003ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	d108      	bne.n	8003f10 <HAL_UART_Transmit+0x6c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f18:	e02e      	b.n	8003f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	@ 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fb9b 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e03a      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3302      	adds	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e007      	b.n	8003f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1cb      	bne.n	8003f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2140      	movs	r1, #64	@ 0x40
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fb67 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08a      	sub	sp, #40	@ 0x28
 8003fbe:	af02      	add	r7, sp, #8
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	f040 8081 	bne.w	80040de <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_UART_Receive+0x2e>
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e079      	b.n	80040e0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2222      	movs	r2, #34	@ 0x22
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004000:	f7fd f828 	bl	8001054 <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	d108      	bne.n	800402e <HAL_UART_Receive+0x74>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d104      	bne.n	800402e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e003      	b.n	8004036 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004036:	e047      	b.n	80040c8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	2120      	movs	r1, #32
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fb0c 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e042      	b.n	80040e0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10c      	bne.n	800407a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	b29a      	uxth	r2, r3
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3302      	adds	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e01f      	b.n	80040ba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004082:	d007      	beq.n	8004094 <HAL_UART_Receive+0xda>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <HAL_UART_Receive+0xe8>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e008      	b.n	80040b4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1b2      	bne.n	8004038 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
  }
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b0ba      	sub	sp, #232	@ 0xe8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_UART_IRQHandler+0x66>
 800413a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fbc2 	bl	80048d0 <UART_Receive_IT>
      return;
 800414c:	e25b      	b.n	8004606 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800414e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80de 	beq.w	8004314 <HAL_UART_IRQHandler+0x22c>
 8004158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004168:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80d1 	beq.w	8004314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xae>
 800417e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_UART_IRQHandler+0xd2>
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f043 0202 	orr.w	r2, r3, #2
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_UART_IRQHandler+0xf6>
 80041c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d011      	beq.n	800420e <HAL_UART_IRQHandler+0x126>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f043 0208 	orr.w	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 81f2 	beq.w	80045fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_UART_IRQHandler+0x14e>
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fb4d 	bl	80048d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004240:	2b40      	cmp	r3, #64	@ 0x40
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_UART_IRQHandler+0x17a>
 800425a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04f      	beq.n	8004302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa55 	bl	8004712 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004272:	2b40      	cmp	r3, #64	@ 0x40
 8004274:	d141      	bne.n	80042fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800428c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1d9      	bne.n	8004276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d013      	beq.n	80042f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	4a7e      	ldr	r2, [pc, #504]	@ (80044c8 <HAL_UART_IRQHandler+0x3e0>)
 80042d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd fadf 	bl	800189a <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e00e      	b.n	8004310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f99e 	bl	8004634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	e00a      	b.n	8004310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f99a 	bl	8004634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	e006      	b.n	8004310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f996 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800430e:	e175      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	bf00      	nop
    return;
 8004312:	e173      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	2b01      	cmp	r3, #1
 800431a:	f040 814f 	bne.w	80045bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8148 	beq.w	80045bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8141 	beq.w	80045bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b40      	cmp	r3, #64	@ 0x40
 800435c:	f040 80b6 	bne.w	80044cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800436c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8145 	beq.w	8004600 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800437a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800437e:	429a      	cmp	r2, r3
 8004380:	f080 813e 	bcs.w	8004600 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800438a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004396:	f000 8088 	beq.w	80044aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1d9      	bne.n	800439a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800440a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800440e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004412:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800441c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e1      	bne.n	80043e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004446:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004448:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800444c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e3      	bne.n	8004422 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800447a:	f023 0310 	bic.w	r3, r3, #16
 800447e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800448c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800448e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800449a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e3      	bne.n	8004468 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd f988 	bl	80017ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8c1 	bl	8004648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044c6:	e09b      	b.n	8004600 <HAL_UART_IRQHandler+0x518>
 80044c8:	080047d9 	.word	0x080047d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 808e 	beq.w	8004604 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8089 	beq.w	8004604 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004516:	647a      	str	r2, [r7, #68]	@ 0x44
 8004518:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800451c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e3      	bne.n	80044f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	623b      	str	r3, [r7, #32]
   return(result);
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3314      	adds	r3, #20
 800454a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800454e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e3      	bne.n	800452a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004594:	61fa      	str	r2, [r7, #28]
 8004596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	617b      	str	r3, [r7, #20]
   return(result);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e3      	bne.n	8004570 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045b2:	4619      	mov	r1, r3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f847 	bl	8004648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045ba:	e023      	b.n	8004604 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <HAL_UART_IRQHandler+0x4f4>
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f913 	bl	8004800 <UART_Transmit_IT>
    return;
 80045da:	e014      	b.n	8004606 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <HAL_UART_IRQHandler+0x51e>
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f953 	bl	80048a0 <UART_EndTransmit_IT>
    return;
 80045fa:	e004      	b.n	8004606 <HAL_UART_IRQHandler+0x51e>
    return;
 80045fc:	bf00      	nop
 80045fe:	e002      	b.n	8004606 <HAL_UART_IRQHandler+0x51e>
      return;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HAL_UART_IRQHandler+0x51e>
      return;
 8004604:	bf00      	nop
  }
}
 8004606:	37e8      	adds	r7, #232	@ 0xe8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004670:	e03b      	b.n	80046ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d037      	beq.n	80046ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fc fceb 	bl	8001054 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <UART_WaitOnFlagUntilTimeout+0x30>
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e03a      	b.n	800470a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d023      	beq.n	80046ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b80      	cmp	r3, #128	@ 0x80
 80046a6:	d020      	beq.n	80046ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	d01d      	beq.n	80046ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d116      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f81d 	bl	8004712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2208      	movs	r2, #8
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00f      	b.n	800470a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4013      	ands	r3, r2
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	bf0c      	ite	eq
 80046fa:	2301      	moveq	r3, #1
 80046fc:	2300      	movne	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	429a      	cmp	r2, r3
 8004706:	d0b4      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004712:	b480      	push	{r7}
 8004714:	b095      	sub	sp, #84	@ 0x54
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800473a:	643a      	str	r2, [r7, #64]	@ 0x40
 800473c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	61fb      	str	r3, [r7, #28]
   return(result);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800476e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e5      	bne.n	800474e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	2b01      	cmp	r3, #1
 8004788:	d119      	bne.n	80047be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	60bb      	str	r3, [r7, #8]
   return(result);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0310 	bic.w	r3, r3, #16
 80047a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047aa:	61ba      	str	r2, [r7, #24]
 80047ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	613b      	str	r3, [r7, #16]
   return(result);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047cc:	bf00      	nop
 80047ce:	3754      	adds	r7, #84	@ 0x54
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff1e 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b21      	cmp	r3, #33	@ 0x21
 8004812:	d13e      	bne.n	8004892 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800481c:	d114      	bne.n	8004848 <UART_Transmit_IT+0x48>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d110      	bne.n	8004848 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]
 8004846:	e008      	b.n	800485a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6211      	str	r1, [r2, #32]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29b      	uxth	r3, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	4619      	mov	r1, r3
 8004868:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800487c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fea3 	bl	800460c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b22      	cmp	r3, #34	@ 0x22
 80048e2:	f040 80ae 	bne.w	8004a42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ee:	d117      	bne.n	8004920 <UART_Receive_IT+0x50>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	b29a      	uxth	r2, r3
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	629a      	str	r2, [r3, #40]	@ 0x28
 800491e:	e026      	b.n	800496e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004932:	d007      	beq.n	8004944 <UART_Receive_IT+0x74>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <UART_Receive_IT+0x82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e008      	b.n	8004964 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29b      	uxth	r3, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4619      	mov	r1, r3
 800497c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800497e:	2b00      	cmp	r3, #0
 8004980:	d15d      	bne.n	8004a3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0220 	bic.w	r2, r2, #32
 8004990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d135      	bne.n	8004a34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	613b      	str	r3, [r7, #16]
   return(result);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f023 0310 	bic.w	r3, r3, #16
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	623a      	str	r2, [r7, #32]
 80049f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	69f9      	ldr	r1, [r7, #28]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e5      	bne.n	80049ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d10a      	bne.n	8004a26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fe0b 	bl	8004648 <HAL_UARTEx_RxEventCallback>
 8004a32:	e002      	b.n	8004a3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fdf3 	bl	8004620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e002      	b.n	8004a44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3730      	adds	r7, #48	@ 0x30
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a50:	b0c0      	sub	sp, #256	@ 0x100
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	ea40 0301 	orr.w	r3, r0, r1
 8004a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004aa4:	f021 010c 	bic.w	r1, r1, #12
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac6:	6999      	ldr	r1, [r3, #24]
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	ea40 0301 	orr.w	r3, r0, r1
 8004ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b8f      	ldr	r3, [pc, #572]	@ (8004d18 <UART_SetConfig+0x2cc>)
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d005      	beq.n	8004aec <UART_SetConfig+0xa0>
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8004d1c <UART_SetConfig+0x2d0>)
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe f9d0 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8004af0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004af4:	e003      	b.n	8004afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af6:	f7fe f9b7 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8004afa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b08:	f040 810c 	bne.w	8004d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	1891      	adds	r1, r2, r2
 8004b24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b26:	415b      	adcs	r3, r3
 8004b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b2e:	4621      	mov	r1, r4
 8004b30:	eb12 0801 	adds.w	r8, r2, r1
 8004b34:	4629      	mov	r1, r5
 8004b36:	eb43 0901 	adc.w	r9, r3, r1
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b4e:	4690      	mov	r8, r2
 8004b50:	4699      	mov	r9, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	eb18 0303 	adds.w	r3, r8, r3
 8004b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	eb49 0303 	adc.w	r3, r9, r3
 8004b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	18db      	adds	r3, r3, r3
 8004b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b80:	4613      	mov	r3, r2
 8004b82:	eb42 0303 	adc.w	r3, r2, r3
 8004b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b90:	f7fb fb38 	bl	8000204 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4b61      	ldr	r3, [pc, #388]	@ (8004d20 <UART_SetConfig+0x2d4>)
 8004b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	011c      	lsls	r4, r3, #4
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be4:	4692      	mov	sl, r2
 8004be6:	469b      	mov	fp, r3
 8004be8:	4643      	mov	r3, r8
 8004bea:	eb1a 0303 	adds.w	r3, sl, r3
 8004bee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c10:	460b      	mov	r3, r1
 8004c12:	18db      	adds	r3, r3, r3
 8004c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c16:	4613      	mov	r3, r2
 8004c18:	eb42 0303 	adc.w	r3, r2, r3
 8004c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c26:	f7fb faed 	bl	8000204 <__aeabi_uldivmod>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4b3b      	ldr	r3, [pc, #236]	@ (8004d20 <UART_SetConfig+0x2d4>)
 8004c32:	fba3 2301 	umull	r2, r3, r3, r1
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2264      	movs	r2, #100	@ 0x64
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	1acb      	subs	r3, r1, r3
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c46:	4b36      	ldr	r3, [pc, #216]	@ (8004d20 <UART_SetConfig+0x2d4>)
 8004c48:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c54:	441c      	add	r4, r3
 8004c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	1891      	adds	r1, r2, r2
 8004c6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c70:	415b      	adcs	r3, r3
 8004c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c78:	4641      	mov	r1, r8
 8004c7a:	1851      	adds	r1, r2, r1
 8004c7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c7e:	4649      	mov	r1, r9
 8004c80:	414b      	adcs	r3, r1
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c90:	4659      	mov	r1, fp
 8004c92:	00cb      	lsls	r3, r1, #3
 8004c94:	4651      	mov	r1, sl
 8004c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	00ca      	lsls	r2, r1, #3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cac:	464b      	mov	r3, r9
 8004cae:	460a      	mov	r2, r1
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ccc:	460b      	mov	r3, r1
 8004cce:	18db      	adds	r3, r3, r3
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ce2:	f7fb fa8f 	bl	8000204 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <UART_SetConfig+0x2d4>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	@ 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	3332      	adds	r3, #50	@ 0x32
 8004cfe:	4a08      	ldr	r2, [pc, #32]	@ (8004d20 <UART_SetConfig+0x2d4>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4422      	add	r2, r4
 8004d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d14:	e106      	b.n	8004f24 <UART_SetConfig+0x4d8>
 8004d16:	bf00      	nop
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	1891      	adds	r1, r2, r2
 8004d3c:	6239      	str	r1, [r7, #32]
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d46:	4641      	mov	r1, r8
 8004d48:	1854      	adds	r4, r2, r1
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	eb43 0501 	adc.w	r5, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	eb45 0303 	adc.w	r3, r5, r3
 8004d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d92:	4629      	mov	r1, r5
 8004d94:	008b      	lsls	r3, r1, #2
 8004d96:	4621      	mov	r1, r4
 8004d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	008a      	lsls	r2, r1, #2
 8004da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004da4:	f7fb fa2e 	bl	8000204 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4b60      	ldr	r3, [pc, #384]	@ (8004f30 <UART_SetConfig+0x4e4>)
 8004dae:	fba3 2302 	umull	r2, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	011c      	lsls	r4, r3, #4
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	61b9      	str	r1, [r7, #24]
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6139      	str	r1, [r7, #16]
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e30:	4649      	mov	r1, r9
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	4641      	mov	r1, r8
 8004e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	008a      	lsls	r2, r1, #2
 8004e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e42:	f7fb f9df 	bl	8000204 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4b38      	ldr	r3, [pc, #224]	@ (8004f30 <UART_SetConfig+0x4e4>)
 8004e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2264      	movs	r2, #100	@ 0x64
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	1acb      	subs	r3, r1, r3
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	3332      	adds	r3, #50	@ 0x32
 8004e60:	4a33      	ldr	r2, [pc, #204]	@ (8004f30 <UART_SetConfig+0x4e4>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e6c:	441c      	add	r4, r3
 8004e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e72:	2200      	movs	r2, #0
 8004e74:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e76:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	1891      	adds	r1, r2, r2
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	415b      	adcs	r3, r3
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e8c:	4641      	mov	r1, r8
 8004e8e:	1851      	adds	r1, r2, r1
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	4649      	mov	r1, r9
 8004e94:	414b      	adcs	r3, r1
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ea4:	4659      	mov	r1, fp
 8004ea6:	00cb      	lsls	r3, r1, #3
 8004ea8:	4651      	mov	r1, sl
 8004eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eae:	4651      	mov	r1, sl
 8004eb0:	00ca      	lsls	r2, r1, #3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4642      	mov	r2, r8
 8004eba:	189b      	adds	r3, r3, r2
 8004ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	460a      	mov	r2, r1
 8004ec2:	eb42 0303 	adc.w	r3, r2, r3
 8004ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ed2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	008b      	lsls	r3, r1, #2
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eea:	4641      	mov	r1, r8
 8004eec:	008a      	lsls	r2, r1, #2
 8004eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ef2:	f7fb f987 	bl	8000204 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <UART_SetConfig+0x4e4>)
 8004efc:	fba3 1302 	umull	r1, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	2164      	movs	r1, #100	@ 0x64
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	3332      	adds	r3, #50	@ 0x32
 8004f0e:	4a08      	ldr	r2, [pc, #32]	@ (8004f30 <UART_SetConfig+0x4e4>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4422      	add	r2, r4
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4d0d      	ldr	r5, [pc, #52]	@ (8004f7c <__libc_init_array+0x38>)
 8004f48:	4c0d      	ldr	r4, [pc, #52]	@ (8004f80 <__libc_init_array+0x3c>)
 8004f4a:	1b64      	subs	r4, r4, r5
 8004f4c:	10a4      	asrs	r4, r4, #2
 8004f4e:	2600      	movs	r6, #0
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	4d0b      	ldr	r5, [pc, #44]	@ (8004f84 <__libc_init_array+0x40>)
 8004f56:	4c0c      	ldr	r4, [pc, #48]	@ (8004f88 <__libc_init_array+0x44>)
 8004f58:	f000 f818 	bl	8004f8c <_init>
 8004f5c:	1b64      	subs	r4, r4, r5
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	2600      	movs	r6, #0
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08004fd4 	.word	0x08004fd4
 8004f80:	08004fd4 	.word	0x08004fd4
 8004f84:	08004fd4 	.word	0x08004fd4
 8004f88:	08004fd8 	.word	0x08004fd8

08004f8c <_init>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr

08004f98 <_fini>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr
